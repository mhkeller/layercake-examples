{"main":{"title":"main.js","contents":"import LayerCake from 'layercake';\nimport points from './data/radarScores.js';\nimport Radar from './components/Radar.html';\nimport AxisRadial from './components/AxisRadial.html';\nimport { scaleLinear } from 'd3-scale';\n\nconst myCake = new LayerCake({\n  padding: { top: 30, right: 0, bottom: 7, left: 0 },\n  r: ['fastball', 'change', 'slider', 'cutter', 'curve'],\n  rScale: scaleLinear(),\n  rRange: ({ width, height }) => {\n    return [0, height / 2];\n  },\n  rDomain: [0, 10],\n  data: points,\n  target: document.getElementById('my-chart')\n})\n  .svgLayers([\n    { component: AxisRadial, opts: {} },\n    { component: Radar, opts: {} }\n  ]);\n\nmyCake.render();"},"htmlExtras":"","components":[{"title":"./components/Radar.html","contents":"<g\n  transform=\"translate({ $width / 2 }, { $height / 2 })\"\n>\n  {#each $data as row}\n    <!-- Draw a line connecting all the dots -->\n    <path class='path-line' d='{path($rGet(row))}' stroke=\"#f0c\" fill=\"#f0c\" fill-opacity=\"0.5\"></path>\n    <!-- Plot each dots -->\n    {#each $rGet(row) as circleR, i}\n      <circle\n        cx=\"{circleR * Math.cos(angleSlice * i - Math.PI/2)}\"\n        cy=\"{circleR * Math.sin(angleSlice * i - Math.PI/2)}\"\n        r=\"4.5\"\n        fill=\"#f0c\"\n        stroke=\"#fff\"\n        stroke-width=\"1\"\n      >\n      </circle>\n    {/each}\n  {/each}\n</g>\n\n\n<style>\n  .path-line {\n    stroke-linejoin: round;\n    stroke-linecap: round;\n    stroke-width: 2;\n  }\n</style>\n\n<script>\nimport { line, curveCardinalClosed } from 'd3-shape';\n\nexport default {\n  namespace: 'svg',\n  computed: {\n    angleSlice: ({ $originalSettings }) => {\n      return Math.PI * 2 / $originalSettings.r.length;\n    },\n    path: ({ angleSlice }) => {\n      return line()\n        .curve(curveCardinalClosed)\n        .x((d, i) => d * Math.cos(angleSlice * i - Math.PI / 2))\n        .y((d, i) => d * Math.sin(angleSlice * i - Math.PI / 2));\n    }\n    /* The manual way */\n    // path: ({ $data, $rGet, angleSlice }) => {\n    //   return 'M' + $data\n    //     .map(d => {\n    //       return $rGet(d).map((val, i) => {\n    //         return [\n    //           val * Math.cos(angleSlice * i - Math.PI / 2),\n    //           val * Math.sin(angleSlice * i - Math.PI / 2)\n    //         ].join(',');\n    //       });\n    //     })\n    //     .join('L') + 'z';\n    // }\n  }\n};\n</script>"},{"title":"./components/AxisRadial.html","contents":"<g\n  transform=\"translate({ $width / 2 }, { $height / 2 })\"\n>\n  <circle\n    cx=\"0\"\n    cy=\"y\"\n    r=\"{max}\"\n    stroke=\"#ccc\"\n    stroke-width=\"1\"\n    fill=\"#CDCDCD\"\n    fill-opacity=\"0.1\"\n  ></circle>\n  <circle\n    cx=\"0\"\n    cy=\"y\"\n    r=\"{max / 2}\"\n    stroke=\"#ccc\"\n    stroke-width=\"1\"\n    fill=\"none\"\n  ></circle>\n\n  {#each $originalSettings.r as label, i}\n    <line\n      x1=\"0\"\n      y1=\"0\"\n      x2=\"{(max * linePaddingFactor) * Math.cos(angleSlice * i - Math.PI/2)}\"\n      y2=\"{(max * linePaddingFactor) * Math.sin(angleSlice * i - Math.PI/2)}\"\n      stroke=\"#ccc\"\n      stroke-width=\"1\"\n      fill=\"none\"\n    >\n    </line>\n    <text\n      text-anchor=\"{anchor($originalSettings.r.length, i)}\"\n      dy=\"0.35em\"\n      font-size=\"12px\"\n      text-outline=\"#fff\"\n      transform=\"translate({(max * labelPaddingFactor) * Math.cos(angleSlice * i - Math.PI/2)}, {(max * labelPaddingFactor) * Math.sin(angleSlice * i - Math.PI/2)})\">{label}</text>\n  {/each}\n</g>\n\n<script>\nexport default {\n  namespace: 'svg',\n  data () {\n    return {\n      linePaddingFactor: 1.1,\n      labelPaddingFactor: 1.25\n    };\n  },\n  computed: {\n    max: ({ $domains, $rScale }) => {\n      return $rScale(Math.max(...$domains.r));\n    },\n    angleSlice: ({ $originalSettings }) => {\n      return Math.PI * 2 / $originalSettings.r.length;\n    }\n  },\n  helpers: {\n    anchor: (total, i) => {\n      if (i === 0 || i === total / 2) {\n        return 'middle';\n      } else if (i < total / 2) {\n        return 'start';\n      } else {\n        return 'end';\n      }\n    }\n  }\n};\n</script>"}],"modules":[{"title":"./data/radarScores.js","contents":"export default [\n  {\n    name: 'Allison',\n    fastball: 10,\n    change: 0,\n    slider: 4,\n    cutter: 8,\n    curve: 5\n  }\n];"}],"componentModules":[],"dek":""}